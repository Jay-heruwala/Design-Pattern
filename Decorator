import java.io.*;

// Abstract Decorator extending InputStream
class CountingInputStream extends FilterInputStream {
    private int wordCount = 0;
    private int charCount = 0;
    private int lineCount = 0;
    
    protected CountingInputStream(InputStream in) {
        super(in);
    }

    @Override
    public int read() throws IOException {
        int data = super.read();
        if (data != -1) {
            charCount++;
            if (data == '\n') lineCount++;
        }
        return data;
    }

    @Override
    public int read(byte[] b, int off, int len) throws IOException {
        int bytesRead = super.read(b, off, len);
        if (bytesRead != -1) {
            String content = new String(b, off, bytesRead);
            charCount += content.length();
            wordCount += content.split("\\s+").length;
            lineCount += content.split("\n").length - 1;
        }
        return bytesRead;
    }

    public int getWordCount() { return wordCount; }
    public int getCharCount() { return charCount; }
    public int getLineCount() { return lineCount; }
}

// Abstract Decorator extending OutputStream
class CountingOutputStream extends FilterOutputStream {
    private int charCount = 0;
    private int wordCount = 0;
    private int lineCount = 0;
    
    public CountingOutputStream(OutputStream out) {
        super(out);
    }

    @Override
    public void write(int b) throws IOException {
        super.write(b);
        charCount++;
        if (b == '\
') lineCount++;
    }

    @Override
    public void write(byte[] b, int off, int len) throws IOException {
        super.write(b, off, len);
        String content = new String(b, off, len);
        charCount += content.length();
        wordCount += content.split("\\s+").length;
        lineCount += content.split("\n").length - 1;
    }
    
    public int getWordCount() { return wordCount; }
    public int getCharCount() { return charCount; }
    public int getLineCount() { return lineCount; }
}

// Testing the Decorators
public class DecoratorPatternExample {
    public static void main(String[] args) throws IOException {
        String testString = "Hello World\nThis is a test.";
        
        // Testing CountingInputStream
        ByteArrayInputStream input = new ByteArrayInputStream(testString.getBytes());
        CountingInputStream countingInputStream = new CountingInputStream(input);
        while (countingInputStream.read() != -1);
        System.out.println("Input Stream Counts:");
        System.out.println("Characters: " + countingInputStream.getCharCount());
        System.out.println("Words: " + countingInputStream.getWordCount());
        System.out.println("Lines: " + countingInputStream.getLineCount());

        // Testing CountingOutputStream
        ByteArrayOutputStream output = new ByteArrayOutputStream();
        CountingOutputStream countingOutputStream = new CountingOutputStream(output);
        countingOutputStream.write(testString.getBytes());
        countingOutputStream.flush();
        System.out.println("Output Stream Counts:");
        System.out.println("Characters: " + countingOutputStream.getCharCount());
        System.out.println("Words: " + countingOutputStream.getWordCount());
        System.out.println("Lines: " + countingOutputStream.getLineCount());
    }
}
